// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currentColor;
    static Array powersOfTwo;
    static int screenAddresses;

    /** Initializes the Screen. */
    function void init() {
        var int n;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let n = 1;
        while(n < 16){
            let powersOfTwo[n] = powersOfTwo[n-1] * 2;
            let n = n+1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int totalScreenBytes;
        let screenAddresses = 8196;
        while (totalScreenBytes > -1){
            do Memory.poke(screenAddresses, 0);
            let screenAddresses = screenAddresses - 1;
        }
        let currentColor = 0;
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    function int mod(int x, int y){
        var int q;
        let q = x/y;
        return x - (q*y);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bitToChange, value;
        let addr =(y*32) + (x/16);
        let value = Memory.peek(16384+addr);
        let bitToChange = Screen.mod(x, 16);

        if (currentColor){
            //set black
            do Memory.poke(addr, (powersOfTwo[bitToChange] | value));
        } else {
            //set white
            do Memory.poke(addr, (~(powersOfTwo[bitToChange]) | value));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, startx, starty, a, b, diff;
        //calculate dx
        if (x1 < x2){
            let dx = x2 - x1;
        } else {
        if (x1 > x2) {
            let dx = x1 - x2;
        } else {
            let dx = 0;
        }
        }

        //calculate dy
        if (y1 < y2){
            let dy = y2 - y1;
        } else {
        if (y1 > y2){
            let dy = y1 - y2;
        } else {
            let dy = 0;
        }
        }

        //calculate startx
        if (x1 < x2){
            let startx = x1;
        } else {
            let startx = x2;
        }

        //calculate starty
        if (y1 < y2){
            let starty = y1;
        } else {
            let starty = y2;
        }

        // handle straight lines
        if (dy = 0){
            while(startx < (dx+1)){
                do Screen.drawPixel(startx, y1);
                let startx = startx + 1;
            }
            return;
        }
        if (dx = 0){
            while(starty < (y2+1)){
                do Screen.drawPixel(starty, x1);
                let starty = starty + 1;
            }
            return;
        }

        //handle tilted lines
        let a = 0;
        let b = 0;
        let diff = 0;
        while((a < dx+1) & (b < dy+1)){
            do Screen.drawPixel(startx + a, starty +b);
            if (diff < 0){
                let a = a+1;
                let diff = diff + dy;
            } else {
                let b = b+1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        //keeping the width same and changing the height by one pixel for each drawLine
        var int starty, endy;
        if (y1 < y2){
            let starty = y1;
            let endy = y2;
        } else {
            let starty = y2;
            let endy = y1;
        }
        while (starty < (endy+1)){
            do Screen.drawLine(x1, starty, x2, endy);
            let starty = starty + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int rsqrd, starty, endy, dy, dysqrd;
        if (r > 182) {
            return;
        }
        let rsqrd = r*r;
        let starty = y - 2*r;
        let endy = 2*r;
        while (starty < endy + 1){
            let dy = endy - starty;
            let dysqrd = dy*dy;
            do Screen.drawLine(x - Math.sqrt(rsqrd-dysqrd), starty, x + Math.sqrt(rsqrd-dysqrd), starty);
            let starty = starty + 1;
        }
        return;

    }
}
