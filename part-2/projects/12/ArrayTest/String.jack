// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field int dynamicLen;
    field int stringLen;
    field Array dynamicString;

    constructor String new(int maxLength) {
        let dynamicString = Array.new(maxLength);
        let stringLen = 0;
        let dynamicLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(dynamicString);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return stringLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return dynamicString[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let dynamicString[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (stringLen < dynamicLen){
            let dynamicString[stringLen] = c;
            let stringLen = stringLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (stringLen > 0){
            let stringLen = stringLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int intIndex;
        var int intValue;

        let intValue = 0;

        //handle isNeg
        if ((stringLen > 0) & dynamicString[0] = 45){
            let isNeg = true;
            let intIndex = 1;
        } else {
            let isNeg = false;
            let intIndex = 0;
        }

        while ((intIndex<stringLen)){
            // check if it is a digit
            if ((dynamicString[intIndex] > 47) & (dynamicString[intIndex]<58)){
                let intValue = intValue*10 + dynamicString[intIndex] - 48;
                let intIndex = intIndex + 1;
            }
        }

        if (isNeg){
            return -intValue;
        } else {
            return intValue;
        }

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let stringLen = 0;
        if (val < 0){
            let val = -val;
            do appendChar(45);
        }

        do recursiveSetInt(val);
        return;
    }

    function char intToChar(int number){
        return number + 48;
    }

    method void recursiveSetInt(int val){
        var char currentChar;
        var int quotient, remainder;

        let quotient = val/10;
        let remainder = val - (quotient*10);
        let currentChar = String.intToChar(remainder);

        if (val < 10){
            do appendChar(currentChar);
        } else {
            do recursiveSetInt(quotient);
            do appendChar(currentChar);
        }
        return;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
