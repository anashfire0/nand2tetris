// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powersOf2;

    /** Initializes the library. */
    function void init() {
        var int n;
        let powersOf2 = Array.new(16);
        let n = 1;
        let powersOf2[0] = 1;

        while (n < 16){
            let powersOf2[n] = powersOf2[n-1] + powersOf2[n-1];
            let n = n+1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
            let x = -x;
        }
        return x;
    }

    function boolean bit(int x, int i){
        return (~((powersOf2[i] & x) = 0));
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, n;
        let sum = 0;
        let n = 0;
        let shiftedX = x;

        while(n < 16){
            if (Math.bit(y, n)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let n = n + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean isNeg;
        let isNeg = false;
        if ((x < 0 & y > 0) | (x > 0 & y < 0)){
            let isNeg = true;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x | y < 1){
            return 0;
        }
        let q = Math.divide(x, 2*y);

        if ((x-(2*q*y)) < y){
            let result = 2*q;
        } else {
            let result = 2*q + 1;
        }

        if (isNeg){
            let result = -result;
        }
        return result;
    }
    

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, partialSum, partialSumSquared;
      let j = 7;
      let y = 0;
      while (j > -1) {
        let partialSum = y + powersOf2[j];
        let partialSumSquared = partialSum * partialSum;
        if ((partialSumSquared > 0) & ((partialSumSquared < x) | (partialSumSquared = x))) {
          let y = partialSum;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        } else {
            return a;
        }
    }
}
