// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let ram[freeList] = 16348 - 2048; // maximum size available
        let ram[freeList+1] = null; //set next address to null
        return;
    }


    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int nextAvailable, prevAvailable, addr;
        let nextAvailable = freeList;
        let prevAvailable = 0;
        let addr = 0;
        while (nextAvailable > 0){
            if (ram[nextAvailable] > size){
                let size = size + 1;
                let addr = nextAvailable + 1;
                let ram[nextAvailable + size] = ram[nextAvailable] - size;
                let ram[nextAvailable + size +1] = ram[nextAvailable +1];
                let ram[nextAvailable] = size;
                if (prevAvailable = 0){
                    let freeList = nextAvailable + size;
                } else {
                    let ram[prevAvailable + 1] = nextAvailable + size;
                }
                let nextAvailable = 0;
            } else {
                let prevAvailable = nextAvailable;
                let nextAvailable = ram[nextAvailable + 1];
            }
        }
        return addr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freeList;
        let freeList = o-1;
        return;
    }    
}
